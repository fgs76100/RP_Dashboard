{"columns":["ADDR","NAME","BLOCK","MSB","LSB","Field","Description","R\/W","Default"],"data":[["0x18145000","OC1BUSCFG","DRAMS",31,31,"OC1_SYNC3","stage of CDC synchronizer\n0x0: 2-stage synchronizer\n0x1: 3-stage synchronizer\nProgramming Mode: static","RW","0x0"],["0x18145000","OC1BUSCFG","DRAMS",30,30,"RESERVED","Reserved","RO","0x0"],["0x18145000","OC1BUSCFG","DRAMS",29,29,"OC1_RAW_EN","Read after write enable. If there are data hazards between DMA ports, do write first and\nthen read when this bit enable.\nNote: enable this bit will cause extra 1 idle latency.\nProgramming Mode: static","RW","0x0"],["0x18145000","OC1BUSCFG","DRAMS",28,25,"RESERVED","Reserved","RO","0x0"],["0x18145000","OC1BUSCFG","DRAMS",24,24,"OC1_BUS_ERROR","Enable this bit to return bus error when ECC error occurs.\nProgramming Mode: static","RW","0x0"],["0x18145000","OC1BUSCFG","DRAMS",23,20,"RESERVED","Reserved","RO","0x0"],["0x18145000","OC1BUSCFG","DRAMS",19,16,"OC1_WR_PATIENCE","For DMA port itself write and read arbitration.\nIf write and read access DFI interface at the same time and read has higher priority,\nread grant reach \"wr_patience+1\" times and write will switch to higher priority.\nProgramming Mode: static","RW","0x0"],["0x18145000","OC1BUSCFG","DRAMS",15,12,"RESERVED","Reserved","RO","0x0"],["0x18145000","OC1BUSCFG","DRAMS",11,8,"OC1_RD_PATIENCE","For DMA port itself write and read arbitration.\nIf write and read access DFI interface at the same time and write has higher priority,\nwrite grant reach \"rd_patience+1\" times and read will switch to higher priority.\nProgramming Mode: static","RW","0x0"],["0x18145000","OC1BUSCFG","DRAMS",7,4,"RESERVED","Reserved","RO","0x0"],["0x18145000","OC1BUSCFG","DRAMS",3,0,"OC1_PRI","Default priority for Port Arbiter. Higher value has higher priority.\nNote: Same value can't be shared between DMA Ports. Must be distinguished.\nProgramming Mode: static","RW","0xF"],["0x18145008","OC1PSAR","DRAMS",31,0,"OC1_PRI_TOKEN","Each bit-field in PRI_TOKEN represents the \"token\", which value means the priority scheduler.\nLow  Priority: Set the token value in the register to 0.\nHigh Priority: Set the token value in the register to 1.\nProgramming Mode: static","RW","0x0"],["0x18145010","OC1DPWC","DRAMS",31,0,"OC1_CMD_WR_CNT","DRAM write command profiling.\nIncrement by one if a single DRAM burst write is performed by corresponding DMA port.\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x18145014","OC1DPRC","DRAMS",31,0,"OC1_CMD_RD_CNT","DRAM read command profiling.\nIncrement by one if a single DRAM burst read is performed by corresponding DMA port\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x18145018","OC1DPRMWC","DRAMS",31,0,"OC1_CMD_RMW_CNT","DRAM Read-Modify-Write(RMW) command profiling.\nIncrement by one if a single RMW is performed by corresponding DMA port.\nThis register only exist when HW_RMW_EN == 1\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x1814501C","OC1DBG","DRAMS",31,30,"RESERVED","Reserved","RO","0x0"],["0x1814501C","OC1DBG","DRAMS",29,28,"OC1_DBG_SEL","ax1 debug signal select","RW","0x0"],["0x1814501C","OC1DBG","DRAMS",27,12,"RESERVED","Reserved","RO","0x0"],["0x1814501C","OC1DBG","DRAMS",11,0,"OC1_ERRORS","bus fatal error","RO","0x0"],["0x18145020","OC2BUSCFG","DRAMS",31,31,"OC2_SYNC3","stage of CDC synchronizer\n0x0: 2-stage synchronizer\n0x1: 3-stage synchronizer\nProgramming Mode: static","RW","0x0"],["0x18145020","OC2BUSCFG","DRAMS",30,30,"RESERVED","Reserved","RO","0x0"],["0x18145020","OC2BUSCFG","DRAMS",29,29,"OC2_RAW_EN","Read after write enable. If there are data hazards between DMA ports, do write first and\nthen read when this bit enable.\nNote: enable this bit will cause extra 1 idle latency.\nProgramming Mode: static","RW","0x0"],["0x18145020","OC2BUSCFG","DRAMS",28,25,"RESERVED","Reserved","RO","0x0"],["0x18145020","OC2BUSCFG","DRAMS",24,24,"OC2_BUS_ERROR","Enable this bit to return bus error when ECC error occurs.\nProgramming Mode: static","RW","0x0"],["0x18145020","OC2BUSCFG","DRAMS",23,20,"RESERVED","Reserved","RO","0x0"],["0x18145020","OC2BUSCFG","DRAMS",19,16,"OC2_WR_PATIENCE","For DMA port itself write and read arbitration.\nIf write and read access DFI interface at the same time and read has higher priority,\nread grant reach \"wr_patience+1\" times and write will switch to higher priority.\nProgramming Mode: static","RW","0x0"],["0x18145020","OC2BUSCFG","DRAMS",15,12,"RESERVED","Reserved","RO","0x0"],["0x18145020","OC2BUSCFG","DRAMS",11,8,"OC2_RD_PATIENCE","For DMA port itself write and read arbitration.\nIf write and read access DFI interface at the same time and write has higher priority,\nwrite grant reach \"rd_patience+1\" times and read will switch to higher priority.\nProgramming Mode: static","RW","0x0"],["0x18145020","OC2BUSCFG","DRAMS",7,4,"RESERVED","Reserved","RO","0x0"],["0x18145020","OC2BUSCFG","DRAMS",3,0,"OC2_PRI","Default priority for Port Arbiter. Higher value has higher priority.\nNote: Same value can't be shared between DMA Ports. Must be distinguished.\nProgramming Mode: static","RW","0xE"],["0x18145028","OC2PSAR","DRAMS",31,0,"OC2_PRI_TOKEN","Each bit-field in PRI_TOKEN represents the \"token\", which value means the priority scheduler.\nLow  Priority: Set the token value in the register to 0.\nHigh Priority: Set the token value in the register to 1.\nProgramming Mode: static","RW","0x0"],["0x18145030","OC2DPWC","DRAMS",31,0,"OC2_CMD_WR_CNT","DRAM write command profiling.\nIncrement by one if a single DRAM burst write is performed by corresponding DMA port.\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x18145034","OC2DPRC","DRAMS",31,0,"OC2_CMD_RD_CNT","DRAM read command profiling.\nIncrement by one if a single DRAM burst read is performed by corresponding DMA port\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x18145038","OC2DPRMWC","DRAMS",31,0,"OC2_CMD_RMW_CNT","DRAM Read-Modify-Write(RMW) command profiling.\nIncrement by one if a single RMW is performed by corresponding DMA port.\nThis register only exist when HW_RMW_EN == 1\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x1814503C","OC2DBG","DRAMS",31,30,"RESERVED","Reserved","RO","0x0"],["0x1814503C","OC2DBG","DRAMS",29,28,"OC2_DBG_SEL","ax1 debug signal select","RW","0x0"],["0x1814503C","OC2DBG","DRAMS",27,12,"RESERVED","Reserved","RO","0x0"],["0x1814503C","OC2DBG","DRAMS",11,0,"OC2_ERRORS","bus fatal error","RO","0x0"],["0x18145040","AX1BUSCFG","DRAMS",31,31,"AX1_SYNC3","stage of CDC synchronizer\n0x0: 2-stage synchronizer\n0x1: 3-stage synchronizer\nProgramming Mode: static","RW","0x0"],["0x18145040","AX1BUSCFG","DRAMS",30,30,"RESERVED","Reserved","RO","0x0"],["0x18145040","AX1BUSCFG","DRAMS",29,29,"AX1_RAW_EN","Read after write enable. If there are data hazards between DMA ports, do write first and\nthen read when this bit enable.\nNote: enable this bit will cause extra 1 idle latency.\nProgramming Mode: static","RW","0x0"],["0x18145040","AX1BUSCFG","DRAMS",28,25,"RESERVED","Reserved","RO","0x0"],["0x18145040","AX1BUSCFG","DRAMS",24,24,"AX1_BUS_ERROR","Enable this bit to return bus error when ECC error occurs.\nProgramming Mode: static","RW","0x0"],["0x18145040","AX1BUSCFG","DRAMS",23,20,"RESERVED","Reserved","RO","0x0"],["0x18145040","AX1BUSCFG","DRAMS",19,16,"AX1_WR_PATIENCE","For DMA port itself write and read arbitration.\nIf write and read access DFI interface at the same time and read has higher priority,\nread grant reach \"wr_patience+1\" times and write will switch to higher priority.\nProgramming Mode: static","RW","0x0"],["0x18145040","AX1BUSCFG","DRAMS",15,12,"RESERVED","Reserved","RO","0x0"],["0x18145040","AX1BUSCFG","DRAMS",11,8,"AX1_RD_PATIENCE","For DMA port itself write and read arbitration.\nIf write and read access DFI interface at the same time and write has higher priority,\nwrite grant reach \"rd_patience+1\" times and read will switch to higher priority.\nProgramming Mode: static","RW","0x0"],["0x18145040","AX1BUSCFG","DRAMS",7,4,"RESERVED","Reserved","RO","0x0"],["0x18145040","AX1BUSCFG","DRAMS",3,0,"AX1_PRI","Default priority for Port Arbiter. Higher value has higher priority.\nNote: Same value can't be shared between DMA Ports. Must be distinguished.\nProgramming Mode: static","RW","0xD"],["0x18145048","AX1PSAR","DRAMS",31,0,"AX1_PRI_TOKEN","Each bit-field in PRI_TOKEN represents the \"token\", which value means the priority scheduler.\nLow  Priority: Set the token value in the register to 0.\nHigh Priority: Set the token value in the register to 1.\nProgramming Mode: static","RW","0x0"],["0x18145050","AX1DPWC","DRAMS",31,0,"AX1_CMD_WR_CNT","DRAM write command profiling.\nIncrement by one if a single DRAM burst write is performed by corresponding DMA port.\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x18145054","AX1DPRC","DRAMS",31,0,"AX1_CMD_RD_CNT","DRAM read command profiling.\nIncrement by one if a single DRAM burst read is performed by corresponding DMA port\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x18145058","AX1DPRMWC","DRAMS",31,0,"AX1_CMD_RMW_CNT","DRAM Read-Modify-Write(RMW) command profiling.\nIncrement by one if a single RMW is performed by corresponding DMA port.\nThis register only exist when HW_RMW_EN == 1\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x1814505C","AX1DBG","DRAMS",31,30,"RESERVED","Reserved","RO","0x0"],["0x1814505C","AX1DBG","DRAMS",29,28,"AX1_DBG_SEL","ax1 debug signal select","RW","0x0"],["0x1814505C","AX1DBG","DRAMS",27,12,"RESERVED","Reserved","RO","0x0"],["0x1814505C","AX1DBG","DRAMS",11,0,"AX1_ERRORS","bus fatal error","RO","0x0"],["0x18145060","AX2BUSCFG","DRAMS",31,31,"AX2_SYNC3","stage of CDC synchronizer\n0x0: 2-stage synchronizer\n0x1: 3-stage synchronizer\nProgramming Mode: static","RW","0x0"],["0x18145060","AX2BUSCFG","DRAMS",30,30,"RESERVED","Reserved","RO","0x0"],["0x18145060","AX2BUSCFG","DRAMS",29,29,"AX2_RAW_EN","Read after write enable. If there are data hazards between DMA ports, do write first and\nthen read when this bit enable.\nNote: enable this bit will cause extra 1 idle latency.\nProgramming Mode: static","RW","0x0"],["0x18145060","AX2BUSCFG","DRAMS",28,25,"RESERVED","Reserved","RO","0x0"],["0x18145060","AX2BUSCFG","DRAMS",24,24,"AX2_BUS_ERROR","Enable this bit to return bus error when ECC error occurs.\nProgramming Mode: static","RW","0x0"],["0x18145060","AX2BUSCFG","DRAMS",23,20,"RESERVED","Reserved","RO","0x0"],["0x18145060","AX2BUSCFG","DRAMS",19,16,"AX2_WR_PATIENCE","For DMA port itself write and read arbitration.\nIf write and read access DFI interface at the same time and read has higher priority,\nread grant reach \"wr_patience+1\" times and write will switch to higher priority.\nProgramming Mode: static","RW","0x0"],["0x18145060","AX2BUSCFG","DRAMS",15,12,"RESERVED","Reserved","RO","0x0"],["0x18145060","AX2BUSCFG","DRAMS",11,8,"AX2_RD_PATIENCE","For DMA port itself write and read arbitration.\nIf write and read access DFI interface at the same time and write has higher priority,\nwrite grant reach \"rd_patience+1\" times and read will switch to higher priority.\nProgramming Mode: static","RW","0x0"],["0x18145060","AX2BUSCFG","DRAMS",7,4,"RESERVED","Reserved","RO","0x0"],["0x18145060","AX2BUSCFG","DRAMS",3,0,"AX2_PRI","Default priority for Port Arbiter. Higher value has higher priority.\nNote: Same value can't be shared between DMA Ports. Must be distinguished.\nProgramming Mode: static","RW","0xC"],["0x18145068","AX2PSAR","DRAMS",31,0,"AX2_PRI_TOKEN","Each bit-field in PRI_TOKEN represents the \"token\", which value means the priority scheduler.\nLow  Priority: Set the token value in the register to 0.\nHigh Priority: Set the token value in the register to 1.\nProgramming Mode: static","RW","0x0"],["0x18145070","AX2DPWC","DRAMS",31,0,"AX2_CMD_WR_CNT","DRAM write command profiling.\nIncrement by one if a single DRAM burst write is performed by corresponding DMA port.\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x18145074","AX2DPRC","DRAMS",31,0,"AX2_CMD_RD_CNT","DRAM read command profiling.\nIncrement by one if a single DRAM burst read is performed by corresponding DMA port\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x18145078","AX2DPRMWC","DRAMS",31,0,"AX2_CMD_RMW_CNT","DRAM Read-Modify-Write(RMW) command profiling.\nIncrement by one if a single RMW is performed by corresponding DMA port.\nThis register only exist when HW_RMW_EN == 1\nMust enable prof_en to trigger.\nNote: Read this register when DRAM controller is idle or prof_en is disabled.","RO","0x0"],["0x1814507C","AX2DBG","DRAMS",31,30,"RESERVED","Reserved","RO","0x0"],["0x1814507C","AX2DBG","DRAMS",29,28,"AX2_DBG_SEL","ax1 debug signal select","RW","0x0"],["0x1814507C","AX2DBG","DRAMS",27,12,"RESERVED","Reserved","RO","0x0"],["0x1814507C","AX2DBG","DRAMS",11,0,"AX2_ERRORS","bus fatal error","RO","0x0"],["0x18145200","DFICFG","DRAMS",31,31,"DFI_RATIO","DFI clock ratio\n0x0: 2:1 mode\n0x1: 1:1 mode\nProgramming Mode: static","RW","0x0"],["0x18145200","DFICFG","DRAMS",30,30,"PROF_EN","DRAM command profiling enable\n0x0: disable\n0x1: enable\nProgramming Mode: dynamic","RW","0x0"],["0x18145200","DFICFG","DRAMS",29,29,"PA_EN","Set 1'b1 to enable Port arbiter, otherwise Port Arbiter is disabled.\nWhen Port arbiter is disabled, all of DRAM request is pending until Port arbiter is enable.\nProgramming Mode: dynamic","RW","0x0"],["0x18145200","DFICFG","DRAMS",28,28,"RMW_EN","Read-Modify-Write(RMW) enable\nEnable when DRAM controller masked write is not allowed.\nAll of partial write or unaligned write will perform read first.\nThen, write data will be merged with returned read data and write back to DRAM.\nNote: Must enable when ECC is on.\n0x0: disable\n0x1: enable\nProgramming Mode: static","RW","0x0"],["0x18145200","DFICFG","DRAMS",27,27,"ECC_EN","Error-correcting code(ECC) enable.\nECC algorithm base on hamming code(72, 64) for single error correction and double error detection.\nRMW must enable too when ECC is on.\nAll of partial or unaligned write will perform RMW operation.\nWhen performing RMW, the returned read data could cause ECC errors.\nIf read data came from unwritten location, read data is unknown, which will cause unexpected ECC Error.\nTo prevent this, such location must be pre-written.\n0x0: disable\n0x1: enable\nProgramming Mode: static","RW","0x0"],["0x18145200","DFICFG","DRAMS",26,26,"ECC_BUS_ERROR","Normally, uncorrectable error will result in bus response error.\nEnable this bit, correctable error also result in bus response error.\nProgramming Mode: static","RW","0x0"],["0x18145200","DFICFG","DRAMS",25,12,"RESERVED","Reserved","RO","0x0"],["0x18145200","DFICFG","DRAMS",11,8,"DDR_PAGE_SIZE","DRAM page size\n0x0: 256 Byte\n0x1: 512 Byte\n0x2:  1K Byte\n0x3:  2K Byte\n0x4:  4K Byte\n0x5   8K Byte\n0x6: 16K Byte\n0x7: 32K Byte\nProgramming Mode: static","RW","0x0"],["0x18145200","DFICFG","DRAMS",7,2,"RESERVED","Reserved","RO","0x0"],["0x18145200","DFICFG","DRAMS",1,0,"DDR_BANK_SIZE","DRAM bank size\n0x0:  2\n0x1:  4\n0x2:  8\n0x3: 16\nProgramming Mode: static","RW","0x0"],["0x18145204","DFIDBG","DRAMS",31,31,"DFI_INTR_EN","dfi interrupt enable\nwhen dfi error occur, interrupt will trigger and save first error\nfor detail error information, see DFIERROR register description\n0x0 disable\n0x1 enable\nProgramming Mode: static","RW","0x0"],["0x18145204","DFIDBG","DRAMS",30,30,"DFI_INTR_CLR","Write 1'b1 to clear interrupt.\nHW auto-clear\nProgramming Mode: dynamic","RWAC","0x0"],["0x18145204","DFIDBG","DRAMS",29,28,"RESERVED","Reserved","RO","0x0"],["0x18145204","DFIDBG","DRAMS",27,27,"CONFLICT_INTR_EN","enable this bit when user need to check if there is a data hazards between DMA ports.\nProgramming Mode: static","RW","0x0"],["0x18145204","DFIDBG","DRAMS",26,26,"CONFLICT_FIRST_ADDR","enable this to log first conflict address, otherwise keep updating incoming conflict address\nProgramming Mode: static","RW","0x0"],["0x18145204","DFIDBG","DRAMS",25,8,"RESERVED","Reserved","RO","0x0"],["0x18145204","DFIDBG","DRAMS",7,4,"PORT_DBG_SEL","port debug select\nProgramming Mode: static","RW","0x0"],["0x18145204","DFIDBG","DRAMS",3,0,"DFI_DBG_SEL","dfi debug select\nProgramming Mode: static","RW","0x0"],["0x18145208","DFIERROR","DRAMS",31,24,"POOL_ERROR","pool FIFO error status","RO","0x0"],["0x18145208","DFIERROR","DRAMS",23,10,"RESERVED","Reserved","RO","0x0"],["0x18145208","DFIERROR","DRAMS",9,6,"BM_ERROR","buffer management error","RO","0x0"],["0x18145208","DFIERROR","DRAMS",5,3,"RESERVED","Reserved","RO","0x0"],["0x18145208","DFIERROR","DRAMS",2,2,"CONFLICT_WARNING","warning of data hazards","RO","0x0"],["0x18145208","DFIERROR","DRAMS",1,1,"ARB_ERROR","port arbiter error","RO","0x0"],["0x18145208","DFIERROR","DRAMS",0,0,"PCTL_ERROR","PCTL error, see PCTL spec CR_ISR\/CR_IMR for detail info","RO","0x0"],["0x1814520C","DFICADDR","DRAMS",31,4,"CONFLICT_ADDR","The conflict address resulting in Data Hazards","RO","0x0"],["0x1814520C","DFICADDR","DRAMS",3,0,"RESERVED","Reserved","RO","0x0"],["0x18145210","ECCFORCEERROR0","DRAMS",31,0,"ECC_FORCE_ERROR_31_0","Force data[31:0] error.\nset 1 will force corresponding bit inverted\nProgramming Mode: static","RW","0x0"],["0x18145214","ECCFORCEERROR1","DRAMS",31,0,"ECC_FORCE_ERROR_63_32","Force data[63:32] error.\nset 1 will force corresponding bit inverted\nProgramming Mode: static","RW","0x0"],["0x18145218","ECCFORCEERROR2","DRAMS",31,8,"RESERVED","Reserved","RO","0x0"],["0x18145218","ECCFORCEERROR2","DRAMS",7,0,"ECC_FORCE_ERROR_71_64","Force parity error.\nset 1 will force corresponding bit inverted\nProgramming Mode: static","RW","0x0"],["0x1814521C","ECCINTR","DRAMS",31,31,"ECC_DE_INTR_EN","Enable ECC double error interrupt.\nProgramming Mode: static","RW","0x0"],["0x1814521C","ECCINTR","DRAMS",30,30,"ECC_SE_INTR_EN","Enable ECC single error interrupt.\nProgramming Mode: static","RW","0x0"],["0x1814521C","ECCINTR","DRAMS",29,29,"RESERVED","Reserved","RO","0x0"],["0x1814521C","ECCINTR","DRAMS",28,28,"ECC_FIRST_ERROR","Enable to keep first error until ecc_intr_clr is trigger.\nOtherwise keep updating incoming error in ECCSTAT register.\nProgramming Mode: static","RW","0x1"],["0x1814521C","ECCINTR","DRAMS",27,26,"RESERVED","Reserved","RO","0x0"],["0x1814521C","ECCINTR","DRAMS",25,25,"FORCE_DOUBLE_ERROR","Write 1'b1 force ecc_double_error asserted.\nProgramming Mode: dynamic","RWAC","0x0"],["0x1814521C","ECCINTR","DRAMS",24,24,"FORCE_SINGLE_ERROR","Write 1'b1 force ecc_single_error asserted.\nProgramming Mode: dynamic","RWAC","0x0"],["0x1814521C","ECCINTR","DRAMS",23,2,"RESERVED","Reserved","RO","0x0"],["0x1814521C","ECCINTR","DRAMS",1,1,"ECC_DE_INTR_CLR","Write 1'b1 to clear double error information register.\nProgramming Mode: dynamic","RWAC","0x0"],["0x1814521C","ECCINTR","DRAMS",0,0,"ECC_SE_INTR_CLR","Write 1'b1 to clear single error information register.\nProgramming Mode: dynamic","RWAC","0x0"],["0x18145220","ECCSTAT","DRAMS",31,20,"RESERVED","Reserved","RO","0x0"],["0x18145220","ECCSTAT","DRAMS",19,12,"ECC_LANE1_ERROR_BIT","Indicate the error bit of ECC lane1 if there is a single-bit error.\nRead Syndrome Table for more detail.\nClear this register field by writing 1'b1 to ecc_se_intr_clr.","RO","0x0"],["0x18145220","ECCSTAT","DRAMS",11,4,"ECC_LANE0_ERROR_BIT","Indicate the error bit of ECC lane0 if there is a single-bit error.\nRead Syndrome Table for more detail.\nClear this register field by writing 1'b1 to ecc_se_intr_clr.","RO","0x0"],["0x18145220","ECCSTAT","DRAMS",3,3,"RESERVED","Reserved","RO","0x0"],["0x18145220","ECCSTAT","DRAMS",2,2,"ECC_DE_RMW_ERROR","Indicate ECC double error occurred when performing RMW operation.\nClear this register field by writing 1'b1 to ecc_de_intr_clr.","RO","0x0"],["0x18145220","ECCSTAT","DRAMS",1,1,"ECC_DOUBLE_ERROR","Indicate ECC double-bit error.\nClear this register field by writing 1'b1 to ecc_de_intr_clr.","RO","0x0"],["0x18145220","ECCSTAT","DRAMS",0,0,"ECC_SINGLE_ERROR","Indicate ECC single-bit error.\nClear this register field by writing 1'b1 to ecc_se_intr_clr.","RO","0x0"],["0x18145224","ECCERRORCNT","DRAMS",31,16,"ECC_DOUBLE_ERROR_CNT","ECC double error counter.\nClear this register field by writing 1'b1 to ecc_se_intr_clr.","RO","0x0"],["0x18145224","ECCERRORCNT","DRAMS",15,0,"ECC_SINGLE_ERROR_CNT","ECC single error counter.\nClear this register field by writing 1'b1 to ecc_de_intr_clr.","RO","0x0"],["0x18145228","ECCDEDATA0","DRAMS",31,0,"ECC_DE_DATA_31_0","The read data cause ECC double error.\nif both ECC lane has double error, only save ECC lane0.\nClear this register field by writing 1'b1 to ecc_de_intr_clr.","RO","0x0"],["0x1814522C","ECCDEDATA1","DRAMS",31,0,"ECC_DE_DATA_63_32","The read data cause ECC double error.\nif both ECC lane has double error, only save ECC lane0.\nClear this register field by writing 1'b1 to ecc_de_intr_clr.","RO","0x0"],["0x18145230","ECCDEDATA2","DRAMS",31,8,"RESERVED","Reserved","RO","0x0"],["0x18145230","ECCDEDATA2","DRAMS",7,0,"ECC_DE_DATA_71_64","The read data cause ECC double error.\nif both ECC lane has double error, only save ECC lane0.\nClear this register field by writing 1'b1 to ecc_de_intr_clr.","RO","0x0"],["0x18145234","ECCDEADDR0","DRAMS",31,28,"ECC_DE_BANK","The number of DRAM bank causes double error.\nClear this register field by writing 1'b1 to ecc_de_intr_clr.","RO","0x0"],["0x18145234","ECCDEADDR0","DRAMS",27,17,"RESERVED","Reserved","RO","0x0"],["0x18145234","ECCDEADDR0","DRAMS",16,0,"ECC_DE_ROW","The number of DRAM row  causes double error.\nClear this register field by writing 1'b1 to ecc_de_intr_clr.","RO","0x0"],["0x18145238","ECCDEADDR1","DRAMS",31,14,"RESERVED","Reserved","RO","0x0"],["0x18145238","ECCDEADDR1","DRAMS",13,2,"ECC_DE_COL","The number of DRAM column causes double error.\nClear this register field by writing 1'b1 to ecc_de_intr_clr.","RO","0x0"],["0x18145238","ECCDEADDR1","DRAMS",1,0,"RESERVED","Reserved","RO","0x0"],["0x1814523C","ECCSEBIT0","DRAMS",31,0,"ECC_CORRECTED_BIT_31_0","This register gives an overall indication of which bits are corrected.\nThe indication includes both ECC lane0 and lane1.\nThe 71-bit indicates the correction of parity[7] and\nn bit indicate n+1 bit of Syndrome Table.\nClear this register field by writing 1'b1 to ecc_se_intr_clr.","RO","0x0"],["0x18145240","ECCSEBIT1","DRAMS",31,0,"ECC_CORRECTED_BIT_63_32","This register gives an overall indication of which bits are corrected.\nThe indication includes both ECC lane0 and lane1.\nThe 71-bit indicates the correction of parity[7] and\nn bit indicate n+1 bit of Syndrome Table.\nClear this register field by writing 1'b1 to ecc_se_intr_clr.","RO","0x0"],["0x18145244","ECCSEBIT2","DRAMS",31,8,"RESERVED","Reserved","RO","0x0"],["0x18145244","ECCSEBIT2","DRAMS",7,0,"ECC_CORRECTED_BIT_71_64","This register gives an overall indication of which bits are corrected.\nThe indication includes both ECC lane0 and lane1.\nThe 71-bit indicates the correction of parity[7] and\nn bit indicate n+1 bit of Syndrome Table.\nClear this register field by writing 1'b1 to ecc_se_intr_clr.","RO","0x0"],["0x18145300","BIST_CTRL","DRAMS",31,31,"BSTC_SRAM_BIST_MODE","bstc bist mode","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",30,30,"BSTC_SRAM_BIST_RSTN","bstc bist active low reset","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",29,28,"RESERVED","Reserved","RO","0x0"],["0x18145300","BIST_CTRL","DRAMS",27,27,"BSTC_SRAM_DRF_BIST_MODE","bstc drf bist mode","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",26,26,"BSTC_SRAM_DRF_TEST_RESUME","bstc drf resume","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",25,16,"RESERVED","Reserved","RO","0x0"],["0x18145300","BIST_CTRL","DRAMS",15,15,"BUS_DPRAM_BIST_MODE","bus bist mode","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",14,14,"RESERVED","Reserved","RO","0x0"],["0x18145300","BIST_CTRL","DRAMS",13,13,"BUS_DPRAM_DRF_BIST_MODE","bus drf bist mode","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",12,12,"BUS_DPRAM_DRF_TEST_RESUME","bus drf resume","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",11,4,"RESERVED","Reserved","RO","0x0"],["0x18145300","BIST_CTRL","DRAMS",3,3,"AX2_DPRAM_BIST_RSTN","bus bist active low reset","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",2,2,"AX1_DPRAM_BIST_RSTN","bus bist active low reset","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",1,1,"OC2_DPRAM_BIST_RSTN","bus bist active low reset","RW","0x0"],["0x18145300","BIST_CTRL","DRAMS",0,0,"OC1_DPRAM_BIST_RSTN","bus bist active low reset","RW","0x0"],["0x18145304","BIST_STATUS","DRAMS",31,31,"BSTC_SRAM_BIST_DONE","bstc bist done","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",30,30,"BSTC_SRAM_DRF_BIST_DONE","bstc drf bist done","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",29,29,"BSTC_SRAM_DRF_START_PAUSE","bstc drf bist pause","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",28,20,"RESERVED","Reserved","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",19,19,"AX2_DPRAM_DRF_START_PAUSE","bus drf bist start pause status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",18,18,"AX1_DPRAM_DRF_START_PAUSE","bus drf bist start pause status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",17,17,"OC2_DPRAM_DRF_START_PAUSE","bus drf bist start pause status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",16,16,"OC1_DPRAM_DRF_START_PAUSE","bus drf bist start pause status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",15,12,"RESERVED","Reserved","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",11,11,"AX2_DPRAM_DRF_BIST_DONE","bus drf bist done status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",10,10,"AX1_DPRAM_DRF_BIST_DONE","bus drf bist done status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",9,9,"OC2_DPRAM_DRF_BIST_DONE","bus drf bist done status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",8,8,"OC1_DPRAM_DRF_BIST_DONE","bus drf bist done status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",7,4,"RESERVED","Reserved","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",3,3,"AX2_DPRAM_BIST_DONE","bus bist bist done status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",2,2,"AX1_DPRAM_BIST_DONE","bus bist bist done status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",1,1,"OC2_DPRAM_BIST_DONE","bus bist bist done status","RO","0x0"],["0x18145304","BIST_STATUS","DRAMS",0,0,"OC1_DPRAM_BIST_DONE","bus bist bist done status","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",31,31,"BSTC_CMD_SRAM_BIST_FAIL","bstc cmd sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",30,30,"BSTC_MSK_SRAM_BIST_FAIL","bstc msk sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",29,29,"BSTC_WD_SRAM_BIST_FAIL","bstc  wd sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",28,28,"BSTC_RD_SRAM_BIST_FAIL","bstc  rd sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",27,27,"BSTC_RG_SRAM_BIST_FAIL","bstc  rg sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",26,24,"RESERVED","Reserved","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",23,23,"BSTC_CMD_SRAM_DRF_BIST_FAIL","bstc cmd drf sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",22,22,"BSTC_MSK_SRAM_DRF_BIST_FAIL","bstc msk drf sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",21,21,"BSTC_WD_SRAM_DRF_BIST_FAIL","bstc  wd drf sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",20,20,"BSTC_RD_SRAM_DRF_BIST_FAIL","bstc  rd drf sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",19,19,"BSTC_RG_SRAM_DRF_BIST_FAIL","bstc  rg drf sram bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",18,12,"RESERVED","Reserved","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",11,11,"AX2_DPRAM_BIST_FAIL","bus DP-RAM bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",10,10,"AX1_DPRAM_BIST_FAIL","bus DP-RAM bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",9,9,"OC2_DPRAM_BIST_FAIL","bus DP-RAM bist fail ","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",8,8,"OC1_DPRAM_BIST_FAIL","bus DP-RAM bist fail  ","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",7,4,"RESERVED","Reserved","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",3,3,"AX2_DPRAM_DRF_BIST_FAIL","bus DP-RAM drf bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",2,2,"AX1_DPRAM_DRF_BIST_FAIL","bus DP-RAM drf bist fail","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",1,1,"OC2_DPRAM_DRF_BIST_FAIL","bus DP-RAM drf bist fail ","RO","0x0"],["0x18145308","BIST_FAIL","DRAMS",0,0,"OC1_DPRAM_DRF_BIST_FAIL","bus DP-RAM drf bist fail     ","RO","0x0"],["0x1814530C","RAM_RME","DRAMS",31,31,"BSTC_CMD_SRAM_RME","bstc cmd sram read margin enable","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",30,30,"BSTC_MSK_SRAM_RME","bstc msk sram read margin enable","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",29,29,"BSTC_WD_SRAM_RME","bstc  wd sram read margin enable","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",28,28,"BSTC_RD_SRAM_RME","bstc  rd sram read margin enable","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",27,27,"BSTC_RG_SRAM_RME","bstc  rg sram read margin enable","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",26,12,"RESERVED","Reserved","RO","0x0"],["0x1814530C","RAM_RME","DRAMS",11,11,"AX2_DPRAM_RMEA","bus DP-RAM write margin enable","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",10,10,"AX1_DPRAM_RMEA","bus DP-RAM write margin enable","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",9,9,"OC2_DPRAM_RMEA","bus DP-RAM write margin enable ","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",8,8,"OC1_DPRAM_RMEA","bus DP-RAM write margin enable  ","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",7,4,"RESERVED","Reserved","RO","0x0"],["0x1814530C","RAM_RME","DRAMS",3,3,"AX2_DPRAM_RMEB","bus DP-RAM read margin enable","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",2,2,"AX1_DPRAM_RMEB","bus DP-RAM read margin enable","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",1,1,"OC2_DPRAM_RMEB","bus DP-RAM read margin enable ","RW","0x0"],["0x1814530C","RAM_RME","DRAMS",0,0,"OC1_DPRAM_RMEB","bus DP-RAM read margin enable     ","RW","0x0"],["0x18145310","BSTC_SRAM_RM","DRAMS",31,28,"BSTC_CMD_SRAM_RM","bstc cmd sram read margin","RW","0x2"],["0x18145310","BSTC_SRAM_RM","DRAMS",27,24,"BSTC_MSK_SRAM_RM","bstc msk sram read margin","RW","0x2"],["0x18145310","BSTC_SRAM_RM","DRAMS",23,20,"BSTC_WD_SRAM_RM","bstc  wd sram read margin","RW","0x2"],["0x18145310","BSTC_SRAM_RM","DRAMS",19,16,"BSTC_RD_SRAM_RM","bstc  rd sram read margin","RW","0x2"],["0x18145310","BSTC_SRAM_RM","DRAMS",15,12,"BSTC_RG_SRAM_RM","bstc  rg sram read margin","RW","0x2"],["0x18145310","BSTC_SRAM_RM","DRAMS",11,0,"RESERVED","Reserved","RO","0x0"],["0x18145314","BUS_DPRAM_RMA","DRAMS",31,16,"RESERVED","Reserved","RO","0x0"],["0x18145314","BUS_DPRAM_RMA","DRAMS",15,12,"AX2_DPRAM_RMA","bus DP-RAM write margin","RW","0x2"],["0x18145314","BUS_DPRAM_RMA","DRAMS",11,8,"AX1_DPRAM_RMA","bus DP-RAM write margin","RW","0x2"],["0x18145314","BUS_DPRAM_RMA","DRAMS",7,4,"OC2_DPRAM_RMA","bus DP-RAM write margin","RW","0x2"],["0x18145314","BUS_DPRAM_RMA","DRAMS",3,0,"OC1_DPRAM_RMA","bus DP-RAM write margin","RW","0x2"],["0x18145318","BUS_DPRAM_RMB","DRAMS",31,16,"RESERVED","Reserved","RO","0x0"],["0x18145318","BUS_DPRAM_RMB","DRAMS",15,12,"AX2_DPRAM_RMB","bus DP-RAM read margin","RW","0x2"],["0x18145318","BUS_DPRAM_RMB","DRAMS",11,8,"AX1_DPRAM_RMB","bus DP-RAM read margin","RW","0x2"],["0x18145318","BUS_DPRAM_RMB","DRAMS",7,4,"OC2_DPRAM_RMB","bus DP-RAM read margin","RW","0x2"],["0x18145318","BUS_DPRAM_RMB","DRAMS",3,0,"OC1_DPRAM_RMB","bus DP-RAM read margin","RW","0x2"]]}